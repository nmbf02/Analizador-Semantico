
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEQleftLTGTleftPLUSMINUSleftTIMESDIVIDEAND BOOL BOOL_TYPE COMMA DIVIDE ELSE EQ EQUALS FALSE GT ID IF INT LBRACE LPAREN LT MINUS NEQ NUMBER OR PLUS PRINT RBRACE RETURN RPAREN SEMI STRING STRING_TYPE TIMES TRUE WHILEprogram : stmt_liststmt_list : stmt stmt_list\n| emptystmt : var_decl\n| assign_stmt\n| if_stmt\n| while_stmt\n| print_stmt\n| func_call\n| func_decl\n| return_stmtvar_decl : INT ID SEMI\n| STRING_TYPE ID SEMI\n| BOOL_TYPE ID SEMIassign_stmt : ID EQUALS expr SEMIif_stmt : IF LPAREN expr RPAREN block\n| IF LPAREN expr RPAREN block ELSE blockwhile_stmt : WHILE LPAREN expr RPAREN blockprint_stmt : PRINT LPAREN expr RPAREN SEMIfunc_call : ID LPAREN args RPAREN SEMIfunc_decl : type ID LPAREN params RPAREN blockreturn_stmt : RETURN expr SEMIblock : LBRACE stmt_list RBRACEargs : expr COMMA args\n| expr\n| emptyparams : param COMMA params\n| param\n| emptyparam : type IDtype : INT\n| STRING_TYPE\n| BOOL_TYPEexpr : expr PLUS expr\n| expr MINUS expr\n| expr TIMES expr\n| expr DIVIDE expr\n| expr EQ expr\n| expr NEQ expr\n| expr LT expr\n| expr GT expr\n| expr AND expr\n| expr OR exprexpr : LPAREN expr RPARENexpr : NUMBER\n| STRING\n| TRUE\n| FALSE\n| IDempty :'
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,22,39,44,45,50,62,86,88,90,91,97,99,100,],[-50,0,-1,-50,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-12,-13,-14,-22,-15,-20,-16,-18,-19,-21,-17,-23,]),'INT':([0,3,5,6,7,8,9,10,11,12,39,44,45,49,50,62,86,88,89,90,91,94,97,99,100,],[13,13,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,72,-22,-15,-20,-16,13,-18,-19,72,-21,-17,-23,]),'STRING_TYPE':([0,3,5,6,7,8,9,10,11,12,39,44,45,49,50,62,86,88,89,90,91,94,97,99,100,],[15,15,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,73,-22,-15,-20,-16,15,-18,-19,73,-21,-17,-23,]),'BOOL_TYPE':([0,3,5,6,7,8,9,10,11,12,39,44,45,49,50,62,86,88,89,90,91,94,97,99,100,],[16,16,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,74,-22,-15,-20,-16,16,-18,-19,74,-21,-17,-23,]),'ID':([0,3,5,6,7,8,9,10,11,12,13,15,16,20,21,24,25,28,29,30,33,39,44,45,50,51,52,53,54,55,56,57,58,59,60,62,64,68,72,73,74,86,88,89,90,91,97,99,100,],[14,14,-4,-5,-6,-7,-8,-9,-10,-11,23,26,27,31,38,38,38,38,38,38,38,-12,-13,-14,-22,38,38,38,38,38,38,38,38,38,38,-15,38,92,-31,-32,-33,-20,-16,14,-18,-19,-21,-17,-23,]),'IF':([0,3,5,6,7,8,9,10,11,12,39,44,45,50,62,86,88,89,90,91,97,99,100,],[17,17,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,-15,-20,-16,17,-18,-19,-21,-17,-23,]),'WHILE':([0,3,5,6,7,8,9,10,11,12,39,44,45,50,62,86,88,89,90,91,97,99,100,],[18,18,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,-15,-20,-16,18,-18,-19,-21,-17,-23,]),'PRINT':([0,3,5,6,7,8,9,10,11,12,39,44,45,50,62,86,88,89,90,91,97,99,100,],[19,19,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,-15,-20,-16,19,-18,-19,-21,-17,-23,]),'RETURN':([0,3,5,6,7,8,9,10,11,12,39,44,45,50,62,86,88,89,90,91,97,99,100,],[21,21,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-22,-15,-20,-16,21,-18,-19,-21,-17,-23,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,22,39,44,45,50,62,86,88,89,90,91,96,97,99,100,],[-50,-3,-4,-5,-6,-7,-8,-9,-10,-11,-2,-12,-13,-14,-22,-15,-20,-16,-50,-18,-19,100,-21,-17,-23,]),'EQUALS':([14,],[24,]),'LPAREN':([14,17,18,19,21,24,25,28,29,30,31,33,51,52,53,54,55,56,57,58,59,60,64,],[25,28,29,30,33,33,33,33,33,33,49,33,33,33,33,33,33,33,33,33,33,33,33,]),'NUMBER':([21,24,25,28,29,30,33,51,52,53,54,55,56,57,58,59,60,64,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'STRING':([21,24,25,28,29,30,33,51,52,53,54,55,56,57,58,59,60,64,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'TRUE':([21,24,25,28,29,30,33,51,52,53,54,55,56,57,58,59,60,64,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'FALSE':([21,24,25,28,29,30,33,51,52,53,54,55,56,57,58,59,60,64,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'SEMI':([23,26,27,32,34,35,36,37,38,40,63,67,75,76,77,78,79,80,81,82,83,84,85,],[39,44,45,50,-45,-46,-47,-48,-49,62,86,91,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,]),'RPAREN':([25,34,35,36,37,38,41,42,43,46,47,48,49,61,64,69,70,71,75,76,77,78,79,80,81,82,83,84,85,87,92,94,98,],[-50,-45,-46,-47,-48,-49,63,-25,-26,65,66,67,-50,85,-50,93,-28,-29,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-24,-30,-50,-27,]),'PLUS':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[51,-45,-46,-47,-48,-49,51,51,51,51,51,51,-34,-35,-36,-37,51,51,51,51,51,51,-44,]),'MINUS':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[52,-45,-46,-47,-48,-49,52,52,52,52,52,52,-34,-35,-36,-37,52,52,52,52,52,52,-44,]),'TIMES':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[53,-45,-46,-47,-48,-49,53,53,53,53,53,53,53,53,-36,-37,53,53,53,53,53,53,-44,]),'DIVIDE':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[54,-45,-46,-47,-48,-49,54,54,54,54,54,54,54,54,-36,-37,54,54,54,54,54,54,-44,]),'EQ':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[55,-45,-46,-47,-48,-49,55,55,55,55,55,55,-34,-35,-36,-37,-38,-39,-40,-41,55,55,-44,]),'NEQ':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[56,-45,-46,-47,-48,-49,56,56,56,56,56,56,-34,-35,-36,-37,-38,-39,-40,-41,56,56,-44,]),'LT':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[57,-45,-46,-47,-48,-49,57,57,57,57,57,57,-34,-35,-36,-37,57,57,-40,-41,57,57,-44,]),'GT':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[58,-45,-46,-47,-48,-49,58,58,58,58,58,58,-34,-35,-36,-37,58,58,-40,-41,58,58,-44,]),'AND':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[59,-45,-46,-47,-48,-49,59,59,59,59,59,59,-34,-35,-36,-37,-38,-39,-40,-41,-42,59,-44,]),'OR':([32,34,35,36,37,38,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,85,],[60,-45,-46,-47,-48,-49,60,60,60,60,60,60,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,]),'COMMA':([34,35,36,37,38,42,70,75,76,77,78,79,80,81,82,83,84,85,92,],[-45,-46,-47,-48,-49,64,94,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-30,]),'LBRACE':([65,66,93,95,],[89,89,89,89,]),'ELSE':([88,100,],[95,-23,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'stmt_list':([0,3,89,],[2,22,96,]),'stmt':([0,3,89,],[3,3,3,]),'empty':([0,3,25,49,64,89,94,],[4,4,43,71,43,4,71,]),'var_decl':([0,3,89,],[5,5,5,]),'assign_stmt':([0,3,89,],[6,6,6,]),'if_stmt':([0,3,89,],[7,7,7,]),'while_stmt':([0,3,89,],[8,8,8,]),'print_stmt':([0,3,89,],[9,9,9,]),'func_call':([0,3,89,],[10,10,10,]),'func_decl':([0,3,89,],[11,11,11,]),'return_stmt':([0,3,89,],[12,12,12,]),'type':([0,3,49,89,94,],[20,20,68,20,68,]),'expr':([21,24,25,28,29,30,33,51,52,53,54,55,56,57,58,59,60,64,],[32,40,42,46,47,48,61,75,76,77,78,79,80,81,82,83,84,42,]),'args':([25,64,],[41,87,]),'params':([49,94,],[69,98,]),'param':([49,94,],[70,70,]),'block':([65,66,93,95,],[88,90,97,99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> stmt_list','program',1,'p_program','parser.py',21),
  ('stmt_list -> stmt stmt_list','stmt_list',2,'p_stmt_list','parser.py',25),
  ('stmt_list -> empty','stmt_list',1,'p_stmt_list','parser.py',26),
  ('stmt -> var_decl','stmt',1,'p_stmt','parser.py',33),
  ('stmt -> assign_stmt','stmt',1,'p_stmt','parser.py',34),
  ('stmt -> if_stmt','stmt',1,'p_stmt','parser.py',35),
  ('stmt -> while_stmt','stmt',1,'p_stmt','parser.py',36),
  ('stmt -> print_stmt','stmt',1,'p_stmt','parser.py',37),
  ('stmt -> func_call','stmt',1,'p_stmt','parser.py',38),
  ('stmt -> func_decl','stmt',1,'p_stmt','parser.py',39),
  ('stmt -> return_stmt','stmt',1,'p_stmt','parser.py',40),
  ('var_decl -> INT ID SEMI','var_decl',3,'p_var_decl','parser.py',44),
  ('var_decl -> STRING_TYPE ID SEMI','var_decl',3,'p_var_decl','parser.py',45),
  ('var_decl -> BOOL_TYPE ID SEMI','var_decl',3,'p_var_decl','parser.py',46),
  ('assign_stmt -> ID EQUALS expr SEMI','assign_stmt',4,'p_assign_stmt','parser.py',50),
  ('if_stmt -> IF LPAREN expr RPAREN block','if_stmt',5,'p_if_stmt','parser.py',54),
  ('if_stmt -> IF LPAREN expr RPAREN block ELSE block','if_stmt',7,'p_if_stmt','parser.py',55),
  ('while_stmt -> WHILE LPAREN expr RPAREN block','while_stmt',5,'p_while_stmt','parser.py',62),
  ('print_stmt -> PRINT LPAREN expr RPAREN SEMI','print_stmt',5,'p_print_stmt','parser.py',66),
  ('func_call -> ID LPAREN args RPAREN SEMI','func_call',5,'p_func_call','parser.py',70),
  ('func_decl -> type ID LPAREN params RPAREN block','func_decl',6,'p_func_decl','parser.py',74),
  ('return_stmt -> RETURN expr SEMI','return_stmt',3,'p_return_stmt','parser.py',78),
  ('block -> LBRACE stmt_list RBRACE','block',3,'p_block','parser.py',82),
  ('args -> expr COMMA args','args',3,'p_args','parser.py',86),
  ('args -> expr','args',1,'p_args','parser.py',87),
  ('args -> empty','args',1,'p_args','parser.py',88),
  ('params -> param COMMA params','params',3,'p_params','parser.py',97),
  ('params -> param','params',1,'p_params','parser.py',98),
  ('params -> empty','params',1,'p_params','parser.py',99),
  ('param -> type ID','param',2,'p_param','parser.py',108),
  ('type -> INT','type',1,'p_type','parser.py',112),
  ('type -> STRING_TYPE','type',1,'p_type','parser.py',113),
  ('type -> BOOL_TYPE','type',1,'p_type','parser.py',114),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binop','parser.py',118),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binop','parser.py',119),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binop','parser.py',120),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binop','parser.py',121),
  ('expr -> expr EQ expr','expr',3,'p_expr_binop','parser.py',122),
  ('expr -> expr NEQ expr','expr',3,'p_expr_binop','parser.py',123),
  ('expr -> expr LT expr','expr',3,'p_expr_binop','parser.py',124),
  ('expr -> expr GT expr','expr',3,'p_expr_binop','parser.py',125),
  ('expr -> expr AND expr','expr',3,'p_expr_binop','parser.py',126),
  ('expr -> expr OR expr','expr',3,'p_expr_binop','parser.py',127),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','parser.py',131),
  ('expr -> NUMBER','expr',1,'p_expr_value','parser.py',135),
  ('expr -> STRING','expr',1,'p_expr_value','parser.py',136),
  ('expr -> TRUE','expr',1,'p_expr_value','parser.py',137),
  ('expr -> FALSE','expr',1,'p_expr_value','parser.py',138),
  ('expr -> ID','expr',1,'p_expr_value','parser.py',139),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',143),
]
